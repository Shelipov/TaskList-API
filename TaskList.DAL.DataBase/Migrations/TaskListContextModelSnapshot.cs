// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskList.DAL.DataBase.Context;

#nullable disable

namespace TaskList.DAL.DataBase.Migrations
{
    [DbContext(typeof(TaskListContext))]
    partial class TaskListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CurrentTaskListUserCurrentTaskList", b =>
                {
                    b.Property<Guid>("CurrentTaskListsCurrentTaskListId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserCurrentTaskListsUserCurrentTaskListId")
                        .HasColumnType("uuid");

                    b.HasKey("CurrentTaskListsCurrentTaskListId", "UserCurrentTaskListsUserCurrentTaskListId");

                    b.HasIndex("UserCurrentTaskListsUserCurrentTaskListId");

                    b.ToTable("CurrentTaskListUserCurrentTaskList");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.CurrentTask", b =>
                {
                    b.Property<Guid>("CurrentTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrentTaskListId")
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentTaskName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IsCompleted")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CurrentTaskId");

                    b.HasIndex("CurrentTaskListId");

                    b.ToTable("CurrentTasks");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.CurrentTaskList", b =>
                {
                    b.Property<Guid>("CurrentTaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentTaskListName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserCurrentTaskListId")
                        .HasColumnType("uuid");

                    b.HasKey("CurrentTaskListId");

                    b.ToTable("CurrentTaskLists");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.UserCurrentTaskList", b =>
                {
                    b.Property<Guid>("UserCurrentTaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserCurrentTaskListId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCurrentTaskLists");
                });

            modelBuilder.Entity("CurrentTaskListUserCurrentTaskList", b =>
                {
                    b.HasOne("TaskList.DAL.Interface.Models.CurrentTaskList", null)
                        .WithMany()
                        .HasForeignKey("CurrentTaskListsCurrentTaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskList.DAL.Interface.Models.UserCurrentTaskList", null)
                        .WithMany()
                        .HasForeignKey("UserCurrentTaskListsUserCurrentTaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.CurrentTask", b =>
                {
                    b.HasOne("TaskList.DAL.Interface.Models.CurrentTaskList", "CurrentTaskList")
                        .WithMany("CurrentTasks")
                        .HasForeignKey("CurrentTaskListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentTaskList");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.UserCurrentTaskList", b =>
                {
                    b.HasOne("TaskList.DAL.Interface.Models.User", "User")
                        .WithMany("UserCurrentTaskList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.CurrentTaskList", b =>
                {
                    b.Navigation("CurrentTasks");
                });

            modelBuilder.Entity("TaskList.DAL.Interface.Models.User", b =>
                {
                    b.Navigation("UserCurrentTaskList");
                });
#pragma warning restore 612, 618
        }
    }
}
